// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package peers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeersServiceClient is the client API for PeersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeersServiceClient interface {
	RequestVotes(ctx context.Context, in *RequestVotesRequest, opts ...grpc.CallOption) (*RequestVotesResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type peersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeersServiceClient(cc grpc.ClientConnInterface) PeersServiceClient {
	return &peersServiceClient{cc}
}

func (c *peersServiceClient) RequestVotes(ctx context.Context, in *RequestVotesRequest, opts ...grpc.CallOption) (*RequestVotesResponse, error) {
	out := new(RequestVotesResponse)
	err := c.cc.Invoke(ctx, "/PeersService/RequestVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peersServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/PeersService/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeersServiceServer is the server API for PeersService service.
// All implementations must embed UnimplementedPeersServiceServer
// for forward compatibility
type PeersServiceServer interface {
	RequestVotes(context.Context, *RequestVotesRequest) (*RequestVotesResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	mustEmbedUnimplementedPeersServiceServer()
}

// UnimplementedPeersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeersServiceServer struct {
}

func (UnimplementedPeersServiceServer) RequestVotes(context.Context, *RequestVotesRequest) (*RequestVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVotes not implemented")
}
func (UnimplementedPeersServiceServer) AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedPeersServiceServer) mustEmbedUnimplementedPeersServiceServer() {}

// UnsafePeersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeersServiceServer will
// result in compilation errors.
type UnsafePeersServiceServer interface {
	mustEmbedUnimplementedPeersServiceServer()
}

func RegisterPeersServiceServer(s grpc.ServiceRegistrar, srv PeersServiceServer) {
	s.RegisterService(&PeersService_ServiceDesc, srv)
}

func _PeersService_RequestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServiceServer).RequestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeersService/RequestVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServiceServer).RequestVotes(ctx, req.(*RequestVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeersService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeersServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeersService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeersServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeersService_ServiceDesc is the grpc.ServiceDesc for PeersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PeersService",
	HandlerType: (*PeersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVotes",
			Handler:    _PeersService_RequestVotes_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _PeersService_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/pb/peers.proto",
}
